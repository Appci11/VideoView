@using VideoView.Models.StoryScriptParts
@inject IWorkspaceService _workspaceService

@*
<div class="grid-container">
    <!-- LEFT SIDE -->
    <div>
        <h2>Story Part (@storypart.Title)</h2>
        <div>
            <label for="title">Title (node tag value in .xml)</label>
            <InputText id="title" @bind-Value="storypart.Title" class="form-control" style="max-width:300px"></InputText>
        </div>
        <div>
            <label>
                Language (name in .xml)
                <InputSelect @bind-Value="storypart.Name" class="form-select" style="min-width:300px;">
                    <option value="en">English</option>
                    <option value="lt">Lithuanian</option>
                </InputSelect>
            </label>
        </div>
        <div>
            <label>
                Speech
                <InputText @bind-Value="storypart.Speech" placeholder="Speech" class="form-control" style="max-width:300px"></InputText>
            </label>
        </div>
*@
@*
        <div>
        <label>
        Speech (base uri + .mp3 audio file name)
        <InputText @bind-Value="mp3BaseUriProperty" placeholder="Base uri" class="form-control" style="max-width:300px"></InputText>
        <InputSelect @bind-Value="mp3FileNameProperty" class="form-select" style="max-width:300px;">
        @if (_workspaceService.WorkClass.StoryScript.StoryPartsAudioFileNames.Count > 0)
        {
        <option value="" disabled default hidden>Previous files found</option>
        @foreach (string name in _workspaceService.WorkClass.StoryScript.StoryPartsAudioFileNames)
        {
        <option value="@name">@name</option>
        }
        <option value="">None</option>
        }
        else
        {
        <option value="" disabled default hidden>Choose files</option>
        }
        </InputSelect>
        </label>
        <br />
        <i>in .xml @storypart.Speech</i>
        </div>
        *@
@*
        <br />
        <InputFile OnChange="@LoadMp3FileNames" multiple>Upload audio files</InputFile>
        *@
@*        <hr />
        <h4>Talking Points</h4>
        @foreach (var item in storypart.Talks)
        {
            <div>
                <label>Text</label><br>
                <InputText @bind-Value="item.Text" class="form-control" style="max-width:300px;"></InputText>
                <button @onclick="() => RemoveTalkingPoint(item)" class="btn btn-danger">Remove</button>
            </div>
            <div>
                <label>Speech (time)</label><br>
                <InputNumber @bind-Value="item.Wait" class="form-control" style="max-width:300px"></InputNumber>
            </div>
        }
        <br />
        <button @onclick="AddTalkingPoint" class="btn btn-primary">More Talking Points</button>
        <br />
        <br />
        <button @onclick="HandleSubmit" type="submit" class="btn btn-primary">Add New Story Part With Current Data</button>
        <InputCheckbox @bind-Value="clearOnSubmit" /> <label>Clear on submit</label>
        <br />
        <button disabled="@editDisable" @onclick="EditCurrentlySelected" class="btn btn-primary">Update Selected Story Part</button>
    </div>
    <!-- RIGHT SIDE -->
    <div>
        @foreach (var item in _workspaceService.WorkClass.StoryScript.StoryParts)
        {
            <a style="cursor:pointer;" @onclick="(() => LoadSelected(item))">@item.Title</a>
            <a style="cursor:pointer; color:red;" @onclick="(() => RemoveSelected(item))">remove</a>
            <br />
        }
    </div>
</div>
*@

<MudTable Items="_workspaceService.WorkClass.StoryScript.StoryParts" Dense="true" RowStyle="background-color:#F6F6F6">
    <ColGroup>
        <col style="width:220px;" />
        <col style="width:200px;" />
        <col style="width:180px;" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudButton OnClick="AddNewStoryPart" Variant="Variant.Outlined" Size="Size.Small" Color="Color.Primary">ADD</MudButton></MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Language</MudTh>
        <MudTh>Speech</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudButton OnClick="@(() => RemoveStoryPart(context))" Variant="Variant.Outlined" Size="Size.Small" Color="Color.Secondary">RMV</MudButton>
            <MudButton OnClick="@(() => ShowBtnPress(context))" Variant="Variant.Outlined" Size="Size.Small" EndIcon="@Icons.Material.Filled.KeyboardArrowDown">T Points</MudButton>
        </MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Language">@context.Name</MudTd>
        <MudTd DataLabel="Speech">@context.Speech</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd></MudTd>
        <MudTd DataLabel="Title">
            <MudTextField @bind-Value="@context.Title" Required Immediate Placeholder="Title of the story part" />
            </MudTd>
            <MudTd DataLabel="Language">
            <MudSelect @bind-Value="@context.Name" Margin="Margin.Dense" Dense="true" FullWidth="false" T="string" Label="Language" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="@("en")">English</MudSelectItem>
                <MudSelectItem Value="@("lt")">Lithuanian</MudSelectItem>
            </MudSelect>
            </MudTd>
            <MudTd DataLabel="Speech">
            <MudTextField @bind-Value="@context.Speech" Required Immediate Placeholder="Uri to .mp3 file (story part speech)" />
            </MudTd>
        </RowEditingTemplate>
        <ChildRowContent>
            @if (context.ShowDetails)
        {
            <MudTr>
                <td colspan="4">
                    <MudCard Elevation="0">
                        <MudCardContent Class="pa-0">
                            <MudTable Items="@context.Talks" Context="TalksContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                <ColGroup>
                                    <col style="width:20px;" />
                                    <col style="width:120px;" />
                                </ColGroup>
                                <HeaderContent>
                                    <MudTh><MudIconButton OnClick="@(() => AddNewTalk(context))" Icon="@Icons.Material.Filled.AddCircleOutline" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" /></MudTh>
                                    <MudTh>Wait Time</MudTh>
                                    <MudTh>Name</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd><MudIconButton OnClick="@(() => RemoveTalk(context, TalksContext))" Icon="@Icons.Material.Filled.RemoveCircleOutline" Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Small" /></MudTd>
                                    <MudTd DataLabel="Wait Time">@TalksContext.Wait</MudTd>
                                    <MudTd DataLabel="Text">@TalksContext.Text</MudTd>
                                </RowTemplate>
                                <RowEditingTemplate>
                                    <MudTd></MudTd>
                                    <MudTd DataLabel="Wait Time">
                                        <MudNumericField @bind-Value="@TalksContext.Wait" Required />
                                    </MudTd>
                                    <MudTd DataLabel="Text">
                                        <MudTextField @bind-Value="@TalksContext.Text" Required Immediate />
                                    </MudTd>
                                </RowEditingTemplate>
                            </MudTable>
                        </MudCardContent>
                    </MudCard>
                </td>
            </MudTr>
        }
    </ChildRowContent>
</MudTable>

@code {
    [Parameter]
    public EventCallback Notify { get; set; }

    StoryPart storypart = new StoryPart();

    //List<Talk> Talks = new List<Talk> { new Talk() };

    int sk = -1;
    //string mp3BaseUri = string.Empty;
    //string mp3BaseUriProperty
    //{
    //    get
    //    {
    //        return mp3BaseUri;
    //    }
    //    set
    //    {
    //        mp3BaseUri = value;
    //        storypart.Speech = mp3BaseUri + mp3FileName;
    //    }
    //}
    //string mp3FileName = string.Empty;
    //string mp3FileNameProperty
    //{
    //    get
    //    {
    //        return mp3FileName;
    //    }
    //    set
    //    {
    //        mp3FileName = value;
    //        storypart.Speech = mp3BaseUri + mp3FileName;
    //    }
    //}

    bool clearOnSubmit = true;
    int storypartIndex = -1;
    bool editDisable = true;

    protected override Task OnInitializedAsync()
    {
        if (_workspaceService.WorkClass.StoryScript.StoryParts.Count > 0)
        {
            PrepareFieldsFromItem(_workspaceService.WorkClass.StoryScript.StoryParts.LastOrDefault<StoryPart>()!, false);
        }
        return base.OnInitializedAsync();
    }

    void AddTalkingPoint()
    {
        storypart.Talks.Add(new Talk());
    }

    void RemoveTalkingPoint(Talk item)
    {
        storypart.Talks.Remove(item);
    }

    void LoadSelected(StoryPart item)
    {
        PrepareFieldsFromItem(item, true);
        storypartIndex = _workspaceService.WorkClass.StoryScript.StoryParts.FindIndex((x) => x.Equals(item));
        storypart.Talks = new List<Talk>();
        foreach (Talk talk in _workspaceService.WorkClass.StoryScript.StoryParts[storypartIndex].Talks)
        {
            storypart.Talks.Add(talk);
        }
        editDisable = false;
    }

    void PrepareFieldsFromItem(StoryPart item, bool existing)
    {
        storypart = new StoryPart();
        if (item.Title.Contains("_"))
        {
            int vt = item.Title.LastIndexOf("_");
            bool isNumber = int.TryParse(item.Title.Substring(vt + 1), out sk);
            if (isNumber)
            {
                storypart.Title = item.Title.Substring(0, vt + 1) + (sk = existing ? sk : ++sk);
            }
            else storypart.Title = string.Empty;
        }
        else storypart.Title = string.Empty;
        storypart.Name = item.Name;
        //if (item.Speech != null && item.Speech.Contains($"/"))
        //{
        //    int vt = item.Speech.LastIndexOf($"/");
        //    mp3BaseUri = item.Speech.Substring(0, vt + 1);
        //    mp3FileName = item.Speech.Substring(vt + 1);
        //}
        //else
        //{
        //    mp3BaseUri = string.Empty;
        //    mp3FileName = string.Empty;
        //}
        storypart.Speech = item.Speech;
    }

    async void RemoveSelected(StoryPart item)
    {
        _workspaceService.WorkClass.StoryScript.StoryParts.Remove(item);
        editDisable = true;
        await Notify.InvokeAsync();
    }

    async void HandleSubmit()
    {
        _workspaceService.AddStoryScriptPart(storypart);
        if (clearOnSubmit)
        {
            storypart = new StoryPart();
            //mp3BaseUri = string.Empty;
            //mp3FileName = string.Empty;
        }
        else
        {
            PrepareFieldsFromItem(storypart, true);
        }
        editDisable = true;
        storypartIndex = -1;
        await Notify.InvokeAsync();
    }

    void EditCurrentlySelected()
    {
        _workspaceService.UpdateStoryScriptPart(storypart, storypartIndex);
        editDisable = true;
    }

    void LoadMp3FileNames(InputFileChangeEventArgs e)
    {
        _workspaceService.WorkClass.StoryScript.StoryPartsAudioFileNames = new List<string>();
        foreach (var file in e.GetMultipleFiles(200))
        {
            try
            {
                _workspaceService.WorkClass.StoryScript.StoryPartsAudioFileNames.Add(file.Name);
            }
            catch { }
        }
    }

    private void ShowBtnPress(StoryPart sp)
    {
        sp.ShowDetails = !sp.ShowDetails;
    }

    async void AddNewStoryPart()
    {
        StoryPart part = new StoryPart { Title = "story_part_" };
        Talk talk = new Talk();
        part.Talks.Add(talk);
        _workspaceService.WorkClass.StoryScript.StoryParts.Add(part);
        await Notify.InvokeAsync();
    }

    async void RemoveStoryPart(StoryPart sp)
    {
        _workspaceService.WorkClass.StoryScript.StoryParts.Remove(sp);
        await Notify.InvokeAsync();
    }

    void AddNewTalk(StoryPart sp)
    {
        sp.Talks.Add(new Talk());
    }

    void RemoveTalk(StoryPart sp, Talk t)
    {
        try
        {
            _workspaceService.WorkClass.StoryScript.StoryParts.FirstOrDefault(sp).Talks.Remove(t);
        }
        catch { }
    }
}
