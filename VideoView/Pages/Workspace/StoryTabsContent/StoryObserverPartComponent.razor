@using VideoView.Models.StoryScriptParts
@inject IWorkspaceService _workspaceService
@inject IJSRuntime _jsRuntime

<div class="grid-container">
    <!-- LEFT SIDE -->
    <div>
        <MudTable Items="_workspaceService.WorkClass.StoryScript.StoryObserverParts" Dense="true" RowStyle="background-color:#F6F6F6">
            <ColGroup>
                <col style="width:220px;" />
                <col style="width:200px;" />
            </ColGroup>
            <HeaderContent>
                <MudTh><MudButton OnClick="AddNewStoryObserverPart" Variant="Variant.Outlined" Size="Size.Small" Color="Color.Primary">ADD</MudButton></MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Video Uri</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudButton OnClick="@(() => RemoveStoryObserverPart(context))" Variant="Variant.Outlined" Size="Size.Small" Color="Color.Secondary">RMV</MudButton>
                    <MudButton OnClick="@(() => ShowBtnPress(context))" Variant="Variant.Outlined" Size="Size.Small" EndIcon="@Icons.Material.Filled.KeyboardArrowDown">Periods</MudButton>
                </MudTd>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Video Uri">@context.VideoUri</MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd></MudTd>
                <MudTd DataLabel="Title">
                    <MudTextField @bind-Value="@context.Title" Required Immediate />
                </MudTd>
                <MudTd DataLabel="Video Uri">
                    <MudTextField @bind-Value="@context.VideoUri" Required Immediate />
                </MudTd>
            </RowEditingTemplate>
            <ChildRowContent>
                @if (context.ShowDetails)
                {
                    <td colspan="3">
                        <MudCard Elevation="0">
                            <MudTable Items="@context.Periods" Context="StoryObserverContext" Hover="true">
                                <ColGroup>
                                    <col style="width:20px;" />
                                    <col style="width:160px;" />
                                </ColGroup>
                                <HeaderContent>
                                    <MudTh><MudIconButton OnClick="@(() => AddNewPeriod(context))" Icon="@Icons.Material.Filled.AddCircleOutline" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" /></MudTh>
                                    <MudTh>Time</MudTh>
                                    <MudTh>Exec</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd><MudIconButton OnClick="@(() => RemovePeriod(context, StoryObserverContext))" Icon="@Icons.Material.Filled.RemoveCircleOutline" Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Small" /></MudTd>
                                    <MudTd DataLabel="Time">@StoryObserverContext.Time</MudTd>
                                    <MudTd DataLabel="Exec">@StoryObserverContext.Exec</MudTd>
                                </RowTemplate>
                                <RowEditingTemplate>
                                    <MudTd></MudTd>
                                    <MudTd DataLabel="Time">
                                        <MudNumericField @bind-Value="StoryObserverContext.Time" Required />
                                    </MudTd>
                                    <MudTd DataLabel="Exec">
                                        <MudSelect @bind-Value="StoryObserverContext.Exec" Margin="Margin.Dense" Dense="true" FullWidth="false" T="string" Label="Exec" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                            @foreach (var item in _workspaceService.WorkClass.StoryScript.StoryParts)
                                            {
                                                <MudSelectItem Value="item.Title">@item.Title</MudSelectItem>
                                            }
                                            @foreach (var item in _workspaceService.WorkClass.StoryScript.QuizParts)
                                            {
                                                <MudSelectItem Value="item.Title">@item.Title</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudTd>
                                </RowEditingTemplate>
                            </MudTable>
                        </MudCard>
                    </td>
                }
            </ChildRowContent>
        </MudTable>
    </div>
    <!-- RIGHT SIDE -->
    <div>
        @if (vidLoaded)
        {
            <div class="d-flex flex-column p-2 align-content-center border border-info">
                <BlazoredVideo TimeUpdateEvent="OnEvent"
                           VideoEventOptions="options"
                               class="w-100"
                               style="max-width:800px;"
                               controls="controls">
                    <source src="video_example.mp4" type="video/mp4" />
                </BlazoredVideo>
            </div>
        }
        <div>
            <div id="player"></div>
            <br />

            @*<button class="btn btn-primary" @onclick="GetCurrentVideoTime">Add Period With Current Video Time</button>*@
            <MudButton OnClick="AddNewPeriodFromVideo"
                       Target="_blank"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.ArrowBack"
                       Color="Color.Primary">
                Add Period
            </MudButton>
        </div>
        <hr />
    </div>
</div>

@code {
    [Parameter]
    public EventCallback Notify { get; set; }

    StoryObserverPart storyobserverpart = new StoryObserverPart();

    int sk = -1;
    bool clearOnSubmit = true;
    int storyobserverpartIndex = -1;
    bool editDisable = true;

    Dictionary<VideoEvents, VideoStateOptions> options = new Dictionary<VideoEvents, VideoStateOptions>();
    VideoState videoState;
    Dictionary<VideoEvents, int> eventCounter = new Dictionary<VideoEvents, int>();
    bool vidLoaded = false;
    string vidId = string.Empty;

    protected override void OnInitialized()
    {
        foreach (var item in (VideoEvents[])(Enum.GetValues(typeof(VideoEvents))))
        {
            if (item != VideoEvents.NotSet)
            {
                eventCounter[item] = 0;
            }
        }
        options[VideoEvents.TimeUpdate] = new VideoStateOptions { CurrentTime = true };
        vidLoaded = true;
    }

    void LoadVideo()
    {
        //string[] arr = storyobserverpart.VideoUri.Split("watch?v=");
        //vidId = arr[1];
        //Console.WriteLine("got into LoadVideo");
        //_jsRuntime.InvokeVoidAsync("initializePlayer", vidId);

        vidLoaded = true;
        StateHasChanged();
    }

    private async Task GetCurrentVideoTime()
    {
        //double sk = await _jsRuntime.InvokeAsync<double>("getTime");
        try
        {
            double sk = videoState.CurrentTime;
            Console.WriteLine(sk);
            AddPeriod(sk);
        }
        catch { }
    }

    void OnEvent(VideoState state)
    {
        videoState = state;
        eventCounter[VideoEvents.TimeUpdate]++;
    }

    void AddPeriod()
    {
        storyobserverpart.Periods.Add(new Period());
    }

    void AddPeriod(double sk)
    {
        storyobserverpart.Periods.Add(new Period { Time = sk });
    }

    void RemovePeriod(Period item)
    {
        storyobserverpart.Periods.Remove(item);
    }

    void LoadSelected(StoryObserverPart item)
    {
        PrepareFieldsFromItem(item, true);
        storyobserverpartIndex = _workspaceService.WorkClass.StoryScript.StoryObserverParts.FindIndex((x) => x.Equals(item));
        storyobserverpart.Periods = new List<Period>();
        foreach (Period period in _workspaceService.WorkClass.StoryScript.StoryObserverParts[storyobserverpartIndex].Periods)
        {
            storyobserverpart.Periods.Add(period);
        }
        editDisable = false;
    }

    void PrepareFieldsFromItem(StoryObserverPart item, bool existing)
    {
        storyobserverpart = new StoryObserverPart();
        storyobserverpart.VideoUri = item.VideoUri;
        if (existing)
        {
            storyobserverpart.Title = item.Title;
        }
        else { storyobserverpart.Title = string.Empty; }
    }

    async void RemoveSelected(StoryObserverPart item)
    {
        _workspaceService.WorkClass.StoryScript.StoryObserverParts.Remove(item);
        editDisable = true;
        await Notify.InvokeAsync();
    }

    async void HandleSubmit()
    {
        _workspaceService.AddStoryScriptStoryObserverPart(storyobserverpart);
        if (clearOnSubmit)
        {
            storyobserverpart = new StoryObserverPart();
        }
        else
        {
            PrepareFieldsFromItem(storyobserverpart, true);
        }
        editDisable = true;
        storyobserverpartIndex = -1;
        await Notify.InvokeAsync();
    }

    void EditCurrentlySelected()
    {
        _workspaceService.UpdateStoryScriptStoryObserverPart(storyobserverpart, storyobserverpartIndex);
        editDisable = true;
    }

    private void ShowBtnPress(StoryObserverPart sop)
    {
        sop.ShowDetails = !sop.ShowDetails;
    }

    async void AddNewStoryObserverPart()
    {
        StoryObserverPart part = new StoryObserverPart { Title = "story_observer" };
        Period period = new Period();
        part.Periods.Add(period);
        _workspaceService.WorkClass.StoryScript.StoryObserverParts.Add(part);
        await Notify.InvokeAsync();
    }

    async void RemoveStoryObserverPart(StoryObserverPart sop)
    {
        _workspaceService.WorkClass.StoryScript.StoryObserverParts.Remove(sop);
        await Notify.InvokeAsync();
    }

    void AddNewPeriod(StoryObserverPart sop)
    {
        sop.Periods.Add(new Period());
    }

    private void AddNewPeriodFromVideo()
    {
        double sk;
        if (null != videoState)
        {
            sk = videoState.CurrentTime;
        }
        else sk = 0;
        _workspaceService.WorkClass.StoryScript.StoryObserverParts[0].Periods.Add(new Period { Time = Math.Round(sk, 2, MidpointRounding.AwayFromZero) });
    }

    void RemovePeriod(StoryObserverPart sop, Period p)
    {
        try
        {
            _workspaceService.WorkClass.StoryScript.StoryObserverParts.FirstOrDefault(sop).Periods.Remove(p);
        }
        catch { }
    }
}
