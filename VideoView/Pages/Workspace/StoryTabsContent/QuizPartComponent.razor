@using VideoView.Models.StoryScriptParts
@inject IWorkspaceService _workspaceService

<MudTable Items="_workspaceService.WorkClass.StoryScript.QuizParts" Dense="true" RowStyle="background-color:#F6F6F6">
    <ColGroup>
        <col style="width:220px;" />
        <col style="width:150px;" />
        <col style="width:180px;" />
        <col style="width:150px;" />
        <col style="width:150px;" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudButton OnClick="AddNewQuizPart" Variant="Variant.Outlined" Size="Size.Small" Color="Color.Primary">ADD</MudButton></MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Language</MudTh>
        <MudTh>Nr</MudTh>
        <MudTh>Correct Nr</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudButton OnClick="@(() => RemoveQuizPart(context))" Variant="Variant.Outlined" Size="Size.Small" Color="Color.Secondary">RMV</MudButton>
            <MudButton OnClick="@(() => ShowBtnPress(context))" Variant="Variant.Outlined" Size="Size.Small" EndIcon="@Icons.Material.Filled.KeyboardArrowDown">Options</MudButton>
        </MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Language">@context.Name</MudTd>
        <MudTd DataLabel="Nr">@context.Nr</MudTd>
        <MudTd DataLabel="Correct Nr">@context.CorrectNr</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd></MudTd>
        <MudTd DataLabel="Title">
            <MudTextField @bind-Value="@context.Title" Required />
        </MudTd>
        <MudTd DataLabel="Language">
            <MudSelect @bind-Value="@context.Name" Margin="Margin.Dense" Dense="true" FullWidth="false" T="string" Label="Language" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="@("en")">English</MudSelectItem>
                <MudSelectItem Value="@("lt")">Lithuanian</MudSelectItem>
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="Nr">
            <MudNumericField @bind-Value="@context.Nr" Required />
        </MudTd>
        <MudTd DataLabel="Correct Nr">
            <MudNumericField @bind-Value="@context.CorrectNr" Required />
        </MudTd>
    </RowEditingTemplate>
    <ChildRowContent>
        @if (context.ShowDetails)
        {
            <td colspan="8">
                <MudCard Elevation="0">
                    <MudTable Items="@context.Options" Context="QuizContext" Hover="true">
                        <ColGroup>
                            <col style="width:20px;" />
                            <col style="width:100px;" />
                            <col style="width:100px;" />
                            <col style="width:100px;" />
                            <col style="width:100px;" />
                            <col/>
                            <col/>
                            <col />
                        </ColGroup>
                        <HeaderContent>
                            <MudTh><MudIconButton OnClick="@(() => AddNewOption(context))" Icon="@Icons.Material.Filled.AddCircleOutline" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" /></MudTh>
                            <MudTh>OX</MudTh>
                            <MudTh>OY</MudTh>
                            <MudTh>Wait</MudTh>
                            <MudTh>Is True</MudTh>
                            <MudTh>Text</MudTh>
                            <MudTh>Answer</MudTh>
                            <MudTh>Speech</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd><MudIconButton OnClick="@(() => RemoveOption(context, QuizContext))" Icon="@Icons.Material.Filled.RemoveCircleOutline" Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Small" /></MudTd>
                            <MudTd DataLabel="OX">@QuizContext.OX</MudTd>
                            <MudTd DataLabel="OY">@QuizContext.OY</MudTd>
                            <MudTd DataLabel="Wait">@QuizContext.Wait</MudTd>
                            <MudTd DataLabel="Is True">@QuizContext.IsTrue</MudTd>
                            <MudTd DataLabel="Text">@QuizContext.Text</MudTd>
                            <MudTd DataLabel="Answer">@QuizContext.Answer</MudTd>
                            <MudTd DataLabel="Speech">@QuizContext.Speech</MudTd>
                        </RowTemplate>
                        <RowEditingTemplate>
                            <MudTd></MudTd>
                            <MudTd DataLabel="OX">
                                <MudNumericField @bind-Value="QuizContext.OX" Required />
                            </MudTd>
                            <MudTd DataLabel="OY">
                                <MudNumericField @bind-Value="QuizContext.OY" Required />
                            </MudTd>
                            <MudTd DataLabel="Wait">
                                <MudNumericField @bind-Value="QuizContext.Wait" Required />
                            </MudTd>
                            <MudTd DataLabel="Is True">
                                <MudCheckBox @bind-Checked="QuizContext.IsTrue"></MudCheckBox>
                            </MudTd>
                            <MudTd DataLabel="Text">
                                <MudTextField @bind-Value="@QuizContext.Text" Required Immediate Placeholder="Text" />
                            </MudTd>
                            <MudTd DataLabel="Answer">
                                <MudTextField @bind-Value="@QuizContext.Answer" Required Immediate Placeholder="Answer" />
                            </MudTd>
                            <MudTd DataLabel="Speech">
                                <MudTextField @bind-Value="@QuizContext.Speech" Required Immediate Placeholder="Uri to .mp3 file" />
                            </MudTd>
                        </RowEditingTemplate>
                    </MudTable>
                </MudCard>
            </td>
        }
    </ChildRowContent>
</MudTable>



@code {
    [Parameter]
    public EventCallback Notify { get; set; }

    //List<Option> Options = new List<Option> { new Option { } };
    QuizPart quizpart = new QuizPart();

    int sk = -1;
    //string mp3BaseUri = string.Empty;
    //string mp3BaseUriProperty
    //{
    //    get
    //    {
    //        return mp3BaseUri;
    //    }
    //    set
    //    {
    //        mp3BaseUri = value;
    //        // iterpimui
    //    }
    //}
    //string mp3FileName = string.Empty;
    //string mp3FileNameProperty
    //{
    //    get
    //    {
    //        return mp3FileName;
    //    }
    //    set
    //    {
    //        mp3FileName = value;
    //        // iterpimui
    //    }
    //}
    bool clearOnSubmit = true;
    int quizpartIndex = -1;
    bool editDisable = true;

    protected override Task OnInitializedAsync()
    {
        if (_workspaceService.WorkClass.StoryScript.QuizParts.Count > 0)
        {
            PrepareFieldsFromItem(_workspaceService.WorkClass.StoryScript.QuizParts.LastOrDefault<QuizPart>()!, false);
        }
        return base.OnInitializedAsync();
    }

    void AddQuizOption()
    {
        quizpart.Options.Add(new Option());
    }

    void RemoveQuizOption(Option item)
    {
        quizpart.Options.Remove(item);
    }

    void LoadSelected(QuizPart item)
    {
        PrepareFieldsFromItem(item, true);
        quizpartIndex = _workspaceService.WorkClass.StoryScript.QuizParts.FindIndex((x) => x.Equals(item));
        quizpart.Options = new List<Option>();
        foreach (Option option in _workspaceService.WorkClass.StoryScript.QuizParts[quizpartIndex].Options)
        {
            quizpart.Options.Add(option);
        }
        editDisable = false;
    }

    void PrepareFieldsFromItem(QuizPart item, bool existing)
    {
        quizpart = new QuizPart();
        if (item.Title.Contains("_"))
        {
            int vt = item.Title.LastIndexOf("_");
            bool isNumber = int.TryParse(item.Title.Substring(vt + 1), out sk);
            if (isNumber)
            {
                quizpart.Title = item.Title.Substring(0, vt + 1) + (sk = existing ? sk : ++sk);
            }
            else quizpart.Title = string.Empty;
        }
        else quizpart.Title = string.Empty;
        quizpart.Name = item.Name;
        quizpart.Nr = item.Nr;
        quizpart.CorrectNr = item.CorrectNr;
        // maybe add some things for options here?
        // or not, the rest loaded elswhere
    }

    async void RemoveSelected(QuizPart item)
    {
        _workspaceService.WorkClass.StoryScript.QuizParts.Remove(item);
        editDisable = true;
        await Notify.InvokeAsync();
    }

    async void HandleSubmit()
    {
        _workspaceService.AddStoryScriptQuizPart(quizpart);
        if (clearOnSubmit)
        {
            quizpart = new QuizPart();
            //mp3BaseUri = string.Empty;
            //mp3FileName = string.Empty;
        }
        else
        {
            PrepareFieldsFromItem(quizpart, true);
        }
        editDisable = true;
        quizpartIndex = -1;
        await Notify.InvokeAsync();
    }

    void EditCurrentlySelected()
    {
        _workspaceService.UpdateStoryScriptQuizPart(quizpart, quizpartIndex);
        editDisable = true;
    }

    void LoadMp3FileNames(InputFileChangeEventArgs e)
    {
        _workspaceService.WorkClass.StoryScript.QuizPartsAudioFileNames = new List<string>();
        foreach (var file in e.GetMultipleFiles(200))
        {
            try
            {
                _workspaceService.WorkClass.StoryScript.QuizPartsAudioFileNames.Add(file.Name);
            }
            catch { }
        }
    }

    private void ShowBtnPress(QuizPart qp)
    {
        qp.ShowDetails = !qp.ShowDetails;
    }

    async void AddNewQuizPart()
    {
        QuizPart part = new QuizPart { Title = "quiz_intro_" + (_workspaceService.WorkClass.StoryScript.QuizParts.Count + 1) };
        Option option = new Option();
        part.Options.Add(option);
        _workspaceService.WorkClass.StoryScript.QuizParts.Add(part);
        await Notify.InvokeAsync();
    }

    async void RemoveQuizPart(QuizPart qp)
    {
        _workspaceService.WorkClass.StoryScript.QuizParts.Remove(qp);
        await Notify.InvokeAsync();
    }

    void AddNewOption(QuizPart qp)
    {
        qp.Options.Add(new Option());
    }

    void RemoveOption(QuizPart qp, Option o)
    {
        try
        {
            qp.Options.Remove(o);
        }
        catch { }
    }
}
