@using VideoView.Models.StoryScriptParts
@inject IWorkspaceService _workspaceService

@*
<div class="grid-container">
    <!-- LEFT SIDE -->
    <div>
        <h2>Story Menu Part (@storymenupart.Title)</h2>
        <div>
            <label for="title">Title (node tag value in .xml)</label>
            <InputText id="title" @bind-Value="storymenupart.Title" class="form-control" style="max-width:300px;"></InputText>
        </div>
        <div>
            <label>
                Language(name in .xml)
                <InputSelect @bind-Value="storymenupart.Name" class="form-select" style="min-width:300px;">
                    <option value="en">English</option>
                    <option value="lt">Lithuanian</option>
                </InputSelect>
            </label>
        </div>
        <hr />
        <h4>Menus</h4>
        @foreach (var item in storymenupart.Menus)
        {
            <div>
                <label for="text">Text</label>
                <InputText id="text" @bind-Value="item.Text" class="form-control" style="max-width:300px;"></InputText>
                <button @onclick="() => RemoveStoryMenuPart(item)" class="btn btn-danger">Remove</button>
            </div>
            <div>
                <label>ox</label><br>
                <InputNumber @bind-Value="item.OX" class="form-control" style="max-width:300px"></InputNumber>
            </div>
            <div>
                <label>oy</label><br>
                <InputNumber @bind-Value="item.OY" class="form-control" style="max-width:300px"></InputNumber>
            </div>
            <div>
                <label for="action">Action</label>
                <InputText id="action" @bind-Value="item.Action" class="form-control" style="max-width:300px;"></InputText>
            </div>
        }
        <br />
        <button @onclick="AddStoryMenuPart" class="btn btn-primary">Add More Menus</button>
        <br />
        <br />
        <button @onclick="HandleSubmit" type="submit" class="btn btn-primary">Add New Story Menu Part With Current Data</button>
        <InputCheckbox @bind-Value="clearOnSubmit" /> <label>Clear on submit</label>
        <br />
        <button disabled="@editDisable" @onclick="EditCurrentlySelected" class="btn btn-primary">Update Selected Story Menu Part</button>
    </div>
    <!-- RIGHT SIDE -->
    <div>
        @foreach(var item in _workspaceService.WorkClass.StoryScript.StoryMenuParts)
        {
            <a @onclick="(() => LoadSelected(item))" style="cursor:pointer;">@item.Title</a>
            <a @onclick="(() => RemoveSelected(item))" style="cursor:pointer; color:red;">remove</a>
            <br />
        }
    </div>
</div>
*@

<MudTable Items="_workspaceService.WorkClass.StoryScript.StoryMenuParts" Dense="true" RowStyle="background-color:#F6F6F6">
    <ColGroup>
        <col style="width:200px;" />
        <col style="width:150px;" />
        <col style="width:180px;" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudButton OnClick="AddNewStoryMenuPart" Variant="Variant.Outlined" Size="Size.Small" Color="Color.Primary">ADD</MudButton></MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Language</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudButton OnClick="@(() => RemoveStoryMenuPart(context))" Variant="Variant.Outlined" Size="Size.Small" Color="Color.Secondary">RMV</MudButton>
            <MudButton OnClick="@(() => ShowBtnPress(context))" Variant="Variant.Outlined" Size="Size.Small">Menus</MudButton>
        </MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Language">@context.Name</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd></MudTd>
        <MudTd DataLabel="Title">
            <MudTextField @bind-Value="@context.Title" Required />
        </MudTd>
        <MudTd DataLabel="Language">
            <MudSelect @bind-Value="@context.Name" Margin="Margin.Dense" Dense="true" FullWidth="false" T="string" Label="Language" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="@("en")">English</MudSelectItem>
                <MudSelectItem Value="@("lt")">Lithuanian</MudSelectItem>
            </MudSelect>
        </MudTd>
    </RowEditingTemplate>
    <ChildRowContent>
         @if(context.ShowDetails)
        {
            <td colspan="5">
                <MudCard Elevation="0">
                    <MudTable Items="@context.Menus" Context="MenuContext" Hover="true">
                        <ColGroup>
                            <col style="width:20px;" />
                            <col style="width:100px;" />
                            <col style="width:100px;" />
                            <col style="width:300px;" />
                        </ColGroup>
                        <HeaderContent>
                            <MudTh><MudIconButton OnClick="@(() => AddNewMenu(context))" Icon="@Icons.Material.Filled.AddCircleOutline" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" /></MudTh>
                            <MudTh>OX</MudTh>
                            <MudTh>OY</MudTh>                            
                            <MudTh>Text</MudTh>
                            <MudTh>Action</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd><MudIconButton OnClick="@(() => RemoveMenu(context, MenuContext))" Icon="@Icons.Material.Filled.RemoveCircleOutline" Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Small" /></MudTd>
                            <MudTd DataLabel="OX">@MenuContext.OX</MudTd>
                            <MudTd DataLabel="OY">@MenuContext.OX</MudTd>
                            <MudTd DataLabel="Text">@MenuContext.Text</MudTd>
                            <MudTd DataLabel="Action">@MenuContext.Action</MudTd>
                        </RowTemplate>
                        <RowEditingTemplate>
                            <MudTd></MudTd>
                            <MudTd DataLabel="OX">
                                <MudNumericField @bind-Value="MenuContext.OX" Required />
                            </MudTd>
                            <MudTd DataLabel="OY">
                                <MudNumericField @bind-Value="MenuContext.OY" Required />
                            </MudTd>
                            <MudTd DataLabel="Text">
                                <MudTextField @bind-Value="@MenuContext.Text" Required />
                            </MudTd>
                            <MudTd DataLabel="Action">
                                <MudTextField @bind-Value="@MenuContext.Action" Required />
                            </MudTd>
                        </RowEditingTemplate>
                    </MudTable>
                </MudCard>
            </td>
        }
    </ChildRowContent>
</MudTable>

@code {
    [Parameter]
    public EventCallback Notify { get; set; }

    StoryMenuPart storymenupart = new StoryMenuPart();

    int sk = -1;
    bool clearOnSubmit = true;
    int storymenupartIndex = -1;
    bool editDisable = true;

    protected override Task OnInitializedAsync()
    {
        if (_workspaceService.WorkClass.StoryScript.StoryMenuParts.Count > 0)
        {
            //PrepareFieldsFromItem
        }
        return base.OnInitializedAsync();
    }

    void AddStoryMenuPart()
    {
        storymenupart.Menus.Add(new Menu());
    }

    void RemoveStoryMenuPart(Menu item)
    {
        storymenupart.Menus.Remove(item);
    }

    void LoadSelected(StoryMenuPart item)
    {
        PrepareFieldsFromItem(item, true);
        storymenupartIndex = _workspaceService.WorkClass.StoryScript.StoryMenuParts.FindIndex((x) => x.Equals(item));
        storymenupart.Menus = new List<Menu>();
        foreach (Menu menu in _workspaceService.WorkClass.StoryScript.StoryMenuParts[storymenupartIndex].Menus)
        {
            storymenupart.Menus.Add(menu);
        }
        editDisable = false;
    }

    void PrepareFieldsFromItem(StoryMenuPart item, bool existing)
    {
        storymenupart = new StoryMenuPart();
        if (existing)
        {
            storymenupart.Title = item.Title;
        }
        else { storymenupart.Title = string.Empty; }
        storymenupart.Name = item.Name;
    }

    async void RemoveSelected(StoryMenuPart item)
    {
        _workspaceService.WorkClass.StoryScript.StoryMenuParts.Remove(item);
        editDisable = true;
        await Notify.InvokeAsync();
    }

    async void HandleSubmit()
    {
        _workspaceService.AddStoryScriptStoryMenuPart(storymenupart);
        if (clearOnSubmit)
        {
            storymenupart = new StoryMenuPart();
        }
        else
        {
            PrepareFieldsFromItem(storymenupart, true);
        }
        editDisable = true;
        storymenupartIndex = -1;
        await Notify.InvokeAsync();
    }

    void EditCurrentlySelected()
    {
        _workspaceService.UpdateStoryScriptStoryMenuPart(storymenupart, storymenupartIndex);
    }

    private void ShowBtnPress(StoryMenuPart smp)
    {
        smp.ShowDetails = !smp.ShowDetails;
    }

    async void AddNewStoryMenuPart()
    {
        StoryMenuPart part = new StoryMenuPart { Title = "temp_title" };
        Menu menu = new Menu { Text = "temp text" };
        part.Menus.Add(menu);
        _workspaceService.WorkClass.StoryScript.StoryMenuParts.Add(part);
        await Notify.InvokeAsync();
    }

    async void RemoveStoryMenuPart(StoryMenuPart smp)
    {
        _workspaceService.WorkClass.StoryScript.StoryMenuParts.Remove(smp);
        await Notify.InvokeAsync();
    }

    void AddNewMenu(StoryMenuPart smp)
    {
        smp.Menus.Add(new Menu { Text = "temp text" });
    }

    void RemoveMenu(StoryMenuPart smp, Menu m)
    {
        try
        {
            _workspaceService.WorkClass.StoryScript.StoryMenuParts.FirstOrDefault(smp).Menus.Remove(m);
        }
        catch { }
    }
}
