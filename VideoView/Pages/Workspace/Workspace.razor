@page "/workspace/{CategoryId}/{ProjectId}"
@using System.Xml.Linq;
@using System.Text;
@using VideoView.Models;
@using VideoView.Models.StoryScriptParts;
@using VideoView.Pages.Workspace.StoryTabsContent

@inject IJSRuntime JSRuntime
@inject IWorkspaceService _workspaceService

@if (loaded)
{
    <h3>@_workspaceService.CategoryName >> @_workspaceService.projectName </h3>

    <label for="name">Name</label>
    <InputText id="name" @bind-Value="_workspaceService.WorkClass.name"></InputText>
}
else
{
    <i>gathering things from server...</i>
}

<button class="btn btn-primary" @onclick="SaveChanges">Išsaugoti pakeitimus serveryje</button>
<a>_________</a>
<button class="btn btn-primary" @onclick="DownloadFile">Parsisiųsti .xml</button>
<br />
<br />

@if (loaded)
{
    <StoryTabsComponent></StoryTabsComponent>
}

@code {
    [Parameter]
    public string? CategoryId { get; set; }
    [Parameter]
    public string? ProjectId { get; set; }
    bool loaded = false;

    WorkClass? work;

    protected override async Task OnInitializedAsync()
    {
        await _workspaceService.GetProjectData(CategoryId!, ProjectId!);
        work = _workspaceService.WorkClass;
        loaded = true;
    }

    void SaveChanges()
    {
        _workspaceService.SendProjectDataToServer();
    }

    public async void DownloadFile()
    {
        XDocument xmlDocument = CreateXmlFile();

        foreach (StoryPart item in _workspaceService.WorkClass.StoryScript.StoryParts)
        {
            XElement element = CreateStoryPartElement(item);
            AddNodeToRoot(xmlDocument, element);
        }

        foreach (QuizPart item in _workspaceService.WorkClass.StoryScript.QuizParts)
        {
            XElement element = CreateQuizPartElement(item);
            AddNodeToRoot(xmlDocument, element);
        }

        foreach(StoryMenuPart item in _workspaceService.WorkClass.StoryScript.StoryMenuParts)
        {
            XElement element = CreateStoryMenuPartElement(item);
            AddNodeToRoot(xmlDocument, element);
        }

        foreach (StoryObserverPart item in _workspaceService.WorkClass.StoryScript.StoryObserverParts)
        {
            XElement element = CreateStoryObserverPartElement(item);
            AddNodeToRoot(xmlDocument, element);
        }

        //Console.WriteLine(xmlDocument.ToString());
        await JSRuntime.InvokeAsync<object>("saveFile", "FailoVardas.xml", xmlDocument.ToString());
    }
    static XDocument CreateXmlFile()
    {
        // kaip  "storyscript.xml" faile, be antrasciu ir t.t.
        XDocument document = new XDocument
            (
                new XElement("krpano")
            );

        return document;
    }

    static XElement CreateStoryPartElement(StoryPart sPart)
    {
        XElement elem;
        if (sPart.Speech == null)
        {
            elem = new XElement(sPart.Title,
                        new XAttribute("name", sPart.Name));
        }
        else
        {
            elem = new XElement(sPart.Title,
                        new XAttribute("name", sPart.Name),
                        new XAttribute("speech", sPart.Speech));
        }
        List<XElement> elements = new List<XElement>();
        int i = 1;
        foreach (Talk t in sPart.Talks)
        {
            elements.Add(new XElement("talk",
                            new XAttribute("name", $"t{i++}"),
                            new XAttribute("text", t.Text),
                            new XAttribute("wait", t.Wait)));
        }
        elem.Add(elements);
        return elem;
    }

    static XElement CreateQuizPartElement(QuizPart qPart)
    {
        XElement elem;  // atskirai, netycia gali salygos veliau prireikt
        elem = new XElement(qPart.Title,
                                new XAttribute("name", qPart.Name),
                                new XAttribute("nr", qPart.Nr),
                                new XAttribute("correct_nr", qPart.CorrectNr));
        List<XElement> elements = new List<XElement>();
        int i = 1;
        foreach (Option o in qPart.Options)
        {
            if (o.Speech != null && o.Speech.Length > 3)
            {
                elements.Add(new XElement("option",
                                new XAttribute("name", $"o{i}"),
                                new XAttribute("ox", o.OX),
                                new XAttribute("oy", o.OY),
                                new XAttribute("text", o.Text),
                                new XAttribute("istrue", o.IsTrue.ToString()),
                                new XAttribute("answer", o.Answer),
                                new XAttribute("wait", o.Wait),
                                new XAttribute("speech", o.Speech)));
            }
            else
            {
                elements.Add(new XElement("option",
                                new XAttribute("name", $"o{i}"),
                                new XAttribute("ox", o.OX),
                                new XAttribute("oy", o.OY),
                                new XAttribute("text", o.Text),
                                new XAttribute("istrue", o.IsTrue.ToString()),
                                new XAttribute("answer", o.Answer),
                                new XAttribute("wait", o.Wait)));
            }
        }
        elem.Add(elements);
        return elem;
    }

    static XElement CreateStoryMenuPartElement(StoryMenuPart storyMenuPart)
    {
        XElement elem;
        elem = new XElement(storyMenuPart.Title,
                                new XAttribute("name", storyMenuPart.Name));
        List<XElement> elements = new List<XElement>();
        int i = 1;
        foreach (Menu m in storyMenuPart.Menus)
        {
            elements.Add(new XElement("manu",
                            new XAttribute("name", $"m{i++}"),
                            new XAttribute("text", m.Text),
                            new XAttribute("ox", m.OX),
                            new XAttribute("oy", m.OY),
                            new XAttribute("action", m.Action)));
        }
        elem.Add(elements);
        return elem;
    }

    static XElement CreateStoryObserverPartElement(StoryObserverPart storyObserverPart)
    {
        XElement elem;
        elem = new XElement(storyObserverPart.Title);
        List<XElement> elements = new List<XElement>();
        int i = 1;
        foreach (Period p in storyObserverPart.Periods)
        {
            elements.Add(new XElement("manu",
                            new XAttribute("name", $"p{i++}"),
                            new XAttribute("time", p.Time),
                            new XAttribute("done", p.Done),
                            new XAttribute("exec", p.Exec)));
        }
        elem.Add(elements);
        return elem;
    }

    static void AddNodeToRoot(XDocument doc, XElement elem)
    {
        doc.Root.Add(elem);
    }
}
