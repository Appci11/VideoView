@page "/preview/{CategoryId}/{ProjectId}"

@using VideoView.Models;
@using VideoView.Models.StoryScriptParts;
@inject IJSRuntime JSRuntime
@inject IWorkspaceService _workspaceService

<div class="d-flex flex-column p-2 align-content-center border border-info">
    <BlazoredVideo TimeUpdateEvent="OnEvent"
                   @ref="video"
                   VideoEventOptions="options"
                   class="w-100"
                   style="max-width:800px;"
                   controls="controls">
        <source src="video_example.mp4" type="video/mp4" />
    </BlazoredVideo>
</div>

<MudText>@videoState.CurrentTime</MudText>
<MudText>Stopping points: @videoTimes</MudText>
<MudButton OnClick="StartPlayingVid">Play</MudButton>


@code {
    [Parameter]
    public string? CategoryId { get; set; }
    [Parameter]
    public string? ProjectId { get; set; }
    Dictionary<VideoEvents, VideoStateOptions> options = new Dictionary<VideoEvents, VideoStateOptions>();
    VideoState videoState = new();
    Dictionary<VideoEvents, int> eventCounter = new Dictionary<VideoEvents, int>();
    BlazoredVideo video;
    string videoTimes = string.Empty;

    protected override async void OnInitialized()
    {
        foreach (var item in (VideoEvents[])(Enum.GetValues(typeof(VideoEvents))))
        {
            if (item != VideoEvents.NotSet)
            {
                eventCounter[item] = 0;
            }
        }
        options[VideoEvents.TimeUpdate] = new VideoStateOptions { CurrentTime = true };
        await GetStopTimesArray();
    }

    double[] arr = { 3.0, 6.0, 9.0 };
    double currentStopTime = 0;

    void StartPlayingVid()
    {
        if (arr[arr.Length - 1] < videoState.CurrentTime)    //jei didziausias laikas jau praejo...
        {
            currentStopTime = 99999;
            PlayVid();
        }
        else
        {
            for (int i = 0; i < arr.Length - 1; i++)
            {
                currentStopTime = arr[i];
                if (currentStopTime > videoState.CurrentTime) break;
                currentStopTime = arr[arr.Length - 1];
            }
            Console.WriteLine("Current time: " + videoState.CurrentTime);
            Console.WriteLine("Will stop at: " + currentStopTime);
            PlayVid();
        }
    }

    void PlayVid()
    {
        video.StartPlayback();
    }

    void StopVid()
    {
        video.PausePlayback();
    }

    void OnEvent(VideoState state)
    {
        videoState = state;
        if (state.CurrentTime > currentStopTime)
        {
            StopVid();
        }
        eventCounter[VideoEvents.TimeUpdate]++;
    }

    async Task GetStopTimesArray()
    {
        List<Period> periods = new();
        await _workspaceService.GetProjectData(CategoryId!, ProjectId!);
        try
        {
            periods = _workspaceService.WorkClass.StoryScript.StoryObserverParts[0].Periods;
        } catch{}
        if(periods.Count > 0)
        {
            periods.Sort();
            arr = new double[periods.Count];
            for(int i = 0; i < periods.Count; i++)
            {
                arr[i] = periods[i].Time;
            }
            videoTimes = string.Empty;
            foreach(var item in arr)
            {
                videoTimes += $"{item} ";
            }
        }
        else Console.WriteLine("Could not find any periods data.");
    }
}
