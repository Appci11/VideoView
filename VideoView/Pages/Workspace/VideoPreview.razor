@page "/preview/{CategoryId}/{ProjectId}"

@using Newtonsoft.Json;
@using VideoView.Models;
@using VideoView.Models.StoryScriptParts;
@inject IJSRuntime JSRuntime
@inject IWorkspaceService _workspaceService
@inject ILocalStorageService _localStorage
@inject HttpClient _http

@if (loaded)
{
    @if (videoExists)
    {
        <div class="d-flex flex-column p-2 align-content-center border border-info">
            <BlazoredVideo TimeUpdateEvent="OnEvent"
                   @ref="video"
                   VideoEventOptions="options"
                           class="w-100"
                           style="max-width:800px;"
                           controls="controls">
                <source src="@_workspaceService.VideoUrl?alt=media&token=@_workspaceService.VideoToken" type="video/mp4" />
            </BlazoredVideo>
        </div>
    }
    else
    {
        <h4>No video found...</h4>
    }
}

<MudText>@videoState.CurrentTime</MudText>
<MudText>Stopping points: @videoTimes</MudText>
<MudButton OnClick="StartPlayingVid">Play</MudButton>

<br />
<br />
<br />
<MudButton OnClick="VideoExists" ButtonType="ButtonType.Button">Download</MudButton>
<h5>@videoExists</h5>
@code {

    async Task<bool> VideoExists()
    {
        string uId = await _localStorage.GetItemAsync<string>("userId");
        videoUrl = $"https://firebasestorage.googleapis.com/v0/b/rolka-videosmth.appspot.com/o/users%2F{uId}%2F{CategoryId}%2F{ProjectId}%2Fvideos%2Fvideo1.mp4";
        var response = await _http.GetAsync(videoUrl);
        if (response.IsSuccessStatusCode)
        {
            try
            {
                var jsonString = response.Content.ReadAsStringAsync().Result;
                FileUploadResponse resp = JsonConvert.DeserializeObject<FileUploadResponse>(jsonString);
                _workspaceService.VideoToken = resp.downloadTokens;
            }
            catch { }
        }
        if (_workspaceService.VideoToken.Length > 0) return true;
        return false;
    }

    bool loaded;
    [Parameter]
    public string? CategoryId { get; set; }
    [Parameter]
    public string? ProjectId { get; set; }
    Dictionary<VideoEvents, VideoStateOptions> options = new Dictionary<VideoEvents, VideoStateOptions>();
    VideoState videoState = new();
    Dictionary<VideoEvents, int> eventCounter = new Dictionary<VideoEvents, int>();
    BlazoredVideo video;
    string videoTimes = string.Empty;
    string videoUrl = string.Empty;
    bool videoExists;

    protected override async Task OnInitializedAsync()
    {
        foreach (var item in (VideoEvents[])(Enum.GetValues(typeof(VideoEvents))))
        {
            if (item != VideoEvents.NotSet)
            {
                eventCounter[item] = 0;
            }
        }
        options[VideoEvents.TimeUpdate] = new VideoStateOptions { CurrentTime = true };
        await GetStopTimesArray();
        videoExists = await VideoExists();
        loaded = true;
    }

    double[] arr = { 3.0, 6.0, 9.0 };
    double currentStopTime = 0;

    void StartPlayingVid()
    {
        if (arr[arr.Length - 1] < videoState.CurrentTime)    //jei didziausias laikas jau praejo...
        {
            currentStopTime = 99999;
            PlayVid();
        }
        else
        {
            for (int i = 0; i < arr.Length - 1; i++)
            {
                currentStopTime = arr[i];
                if (currentStopTime > videoState.CurrentTime) break;
                currentStopTime = arr[arr.Length - 1];
            }
            Console.WriteLine("Current time: " + videoState.CurrentTime);
            Console.WriteLine("Will stop at: " + currentStopTime);
            PlayVid();
        }
    }

    void PlayVid()
    {
        video.StartPlayback();
    }

    void StopVid()
    {
        video.PausePlayback();
    }

    void OnEvent(VideoState state)
    {
        videoState = state;
        if (state.CurrentTime > currentStopTime)
        {
            StopVid();
        }
        eventCounter[VideoEvents.TimeUpdate]++;
    }

    async Task GetStopTimesArray()
    {
        List<Period> periods = new();
        await _workspaceService.GetProjectData(CategoryId!, ProjectId!);
        try
        {
            periods = _workspaceService.WorkClass.StoryScript.StoryObserverParts[0].Periods;
        }
        catch { }
        if (periods.Count > 0)
        {
            periods.Sort();
            arr = new double[periods.Count];
            for (int i = 0; i < periods.Count; i++)
            {
                arr[i] = periods[i].Time;
            }
            videoTimes = string.Empty;
            foreach (var item in arr)
            {
                videoTimes += $"{item} ";
            }
        }
        else Console.WriteLine("Could not find any periods data.");
    }

    //async Task CreateVideoUrl()
    //{
    //    string uId = await _localStorage.GetItemAsync<string>("userId");
    //    if (uId == string.Empty)
    //    {
    //        videoUrl = string.Empty;
    //        return;
    //    }
    //    //string url = $"https://firebasestorage.googleapis.com/v0/b/rolka-videosmth.appspot.com/o/bandymas.txt";
    //    string url = $"https://firebasestorage.googleapis.com/v0/b/rolka-videosmth.appspot.com/o/users%2Fy7YiHhyF0pSNlwrHJ13At04p7F13%2FRqkkLxocfYsgeAk9urWK%2FZ49XsvVoWGYkksqXVR1i%2Fvideos%2Fbandymas.txt";
    //    videoUrl = url;
    //}

    //async Task GetVideoData()
    //{
    //    HttpResponseMessage response = await _http.GetAsync(videoUrl);
    //    if (response.IsSuccessStatusCode) videoExists = true;
    //    else videoExists = false;
    //    Console.WriteLine(response);
    //}
}
