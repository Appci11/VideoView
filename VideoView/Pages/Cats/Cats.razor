@page "/cats"
@using VideoView.Models.Cat;
@using VideoView.Services.CatsService;

@inject ICatsService _catsService
@inject NavigationManager _navigationManager

<h3>Cats</h3>

@if (loaded)
{
    <div>
        <QuickGrid Items="FilteredCats" ResizableColumns Pagination="pagination" Class="search">
            <PropertyColumn Property="c => c.fields.name.stringValue" Sortable="true" Title="Name">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Cat name..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="c => c.createTime" Sortable="true" Title="Entry Creation Date" />

            <TemplateColumn Title="Actions">
                <button @onclick="@(() => GoToEdit(context))" class="btn btn-primary oi oi-pencil"></button>
                <button @onclick="@(() => Delete_Click(context))" class="btn btn-danger oi oi-x"></button>
            </TemplateColumn>


        </QuickGrid>
    </div>
    <button class="btn btn-primary" @onclick="CreateNewCat">Create a new cat</button>
}
else
{
    <div class="loader">Loading...</div>
}

@code {
    IQueryable<Cat>? itemsQueryable;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    string nameFilter;

    bool loaded = false;

    protected override async Task OnInitializedAsync()
    {
        await _catsService.GetAllCats();
        itemsQueryable = _catsService.Cats.AsQueryable();
        loaded = true;
    }

    IQueryable<Cat> FilteredCats
    {
        get
        {
            var result = itemsQueryable;

            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c => c.fields.name.stringValue.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            return result;
        }
    }

    void CreateNewCat()
    {
        _navigationManager.NavigateTo("/cat");
    }

    void GoToEdit(Cat c)
    {
        string id = c.name.Split('/').Last();
        _navigationManager.NavigateTo($"/cat/{id}");
    }

    async void Delete_Click(Cat c)
    {
        string id = c.name.Split('/').Last();
        await _catsService.DeleteCat(id);
        await _catsService.GetAllCats();
        itemsQueryable = _catsService.Cats.AsQueryable();
        StateHasChanged();
    }

}
