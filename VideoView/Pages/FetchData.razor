@page "/fetchdata"
@inject HttpClient Http

@*
<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}
*@
<input id="stayLoggedInCheck" type="checkbox" @bind="IsChecked">
<label for="stayLoggedInCheck">Stay logged in</label>
<br />
<button class="btn btn-primary" @onclick="Check">Check</button>
<br />
<p>@text</p>
@code {
    private WeatherForecast[]? forecasts;

    public bool IsChecked { get; set; }
    string text = "kriu";
    void Check()
    {
        if (IsChecked)
        {
            text = "True";    
        }
        else
        {
            text = "False";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
