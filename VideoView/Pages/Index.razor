@page "/"
@using VideoView.Models.Category;
@using VideoView.Models.Project;
@using VideoView.Services.AuthService;
@using VideoView.Services.CategoriesService;
@using VideoView.Services.ProjectsService;
@using VideoView.Services.WorkspaceService;
@using VideoView.Shared.Dialogs;

@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager _navigationManager
@inject ICategoriesService _categoriesService
@inject IProjectsService _projectsService
@inject IWorkspaceService _workspaceService
@inject IAuthService _authService
@inject ILocalStorageService _localStorage
@inject IDialogService _dialogService
@inject ISnackbar Snackbar

<AuthorizeView>
    <NotAuthorized>
        <div class="d-grid gap-2">
            <button type="button" class="btn btn-outline-secondary" @onclick="GoToLogin">Prisijungti</button>
        </div>
    </NotAuthorized>
    <Authorized>
        @if (loaded)
        {
            <MudPaper Elevation="0" Class="d-flex flex-row">
                <MudPaper Elevation="0" Width="300px">
                    <MudSelect @bind-Value="@CategoryName" Margin="Margin.Dense" Dense="true" FullWidth="false" T="string" Label="Category" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        @if (Categories != null)
                        {
                            @foreach (Category item in Categories)
                            {
                                <MudSelectItem Value="item.name">@item.fields.name.stringValue</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudPaper>
                <div>
                    <MudFab OnClick="OpenAddCategoryDialog" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Class="d-inline-flex pa-4" />
                    <MudFab OnClick="RemoveCategory" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Remove" Size="Size.Small" Class="d-inline-flex pa-4" />
                </div>
            </MudPaper>
            <MudPaper Elevation="0" Class="d-flex flex-row">
                <MudPaper Elevation="0" Width="300px">
                    <MudSelect @bind-Value="ProjectName" Margin="Margin.Dense" Disabled="@projectsSelectionDisabled" Dense="true" FullWidth="false" T="string" Label="Project" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        @if (Projects != null)
                        {
                            @foreach (Project item in Projects)
                            {
                                <MudSelectItem Value="item.name">@item.fields.name.stringValue</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudPaper>
                <div>
                    <MudFab OnClick="OpenAddProjectDialog" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Class="d-inline-flex pa-4" />
                    <MudFab OnClick="RemoveProject" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Remove" Size="Size.Small" Class="d-inline-flex pa-4" />
                </div>
            </MudPaper>
            <MudButton OnClick="GoToWorkspace"
                   Target="_blank"
                   Variant="Variant.Filled"
                   EndIcon="@Icons.Material.Filled.ArrowForward"
                   Color="Color.Primary"
                   Disabled=@goToWorkspaceDisabled
                   Style="margin-top:15px;">                   
                Go To Project
            </MudButton>
            <br />
            <br />
            <MudButton OnClick="GoToPreview"
                   Target="_blank"
                   Variant="Variant.Filled"
                   EndIcon="@Icons.Material.Filled.ArrowForward"
                   Color="Color.Primary"
                   Disabled=@goToPreviewDisabled>
                Go To Preview
            </MudButton>
        }
        else
        {
            <a>Getting data from database...</a>
        }
    </Authorized>
</AuthorizeView>
@code {
    List<Category>? Categories;
    string CategoryId { get; set; } = string.Empty;
    List<Project>? Projects;
    string ProjectId { get; set; } = string.Empty;
    string categoryName = string.Empty;
    string CategoryName
    {
        get
        {
            return categoryName;
        }
        set
        {
            categoryName = value;
            if (value != string.Empty)
            {
                GetProjects();
            }
        }
    }
    string projectName = string.Empty;
    string ProjectName
    {
        get
        {
            return projectName;
        }
        set
        {
            projectName = value;
            SelectProject(projectName);
            OnValueChanged(value);
        }
    }

    bool loaded = false;
    bool categoriesExist = false;
    bool projectsSelectionDisabled = true;
    bool goToWorkspaceDisabled = true;
    bool goToPreviewDisabled = true;

    string errorText = "";

    void Kriu()
    {
        Console.WriteLine("kriu");
    }

    protected override async Task OnInitializedAsync()
    {
        if (await _localStorage.GetItemAsync<DateTime>("idTokenExpirationDate") < DateTime.Now)
        {
            await _authService.RefreshTokens();
        }

        await _authService.RefreshTokens();
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            Categories = await _categoriesService.GetAllCategories();
        }
        if (Categories != null && Categories.Count > 0)
        {
            categoriesExist = true;
        }
        else
        {
            errorText = "Nerasta nei viena kategorija.";
        }
        loaded = true;
    }

    async void GetProjects()
    {
        CategoryId = categoryName.Split('/').Last();
        Projects = await _projectsService.GetAllProjects(CategoryId);
        projectsSelectionDisabled = false;
        StateHasChanged();
    }

    void SelectProject(string e)
    {
        ProjectId = e.Split('/').Last();
        goToWorkspaceDisabled = false;
        goToPreviewDisabled = false;
        StateHasChanged();
    }

    void GoToLogin()
    {
        _navigationManager.NavigateTo("login");
    }

    void GoToWorkspace()
    {
        _workspaceService.CategoryId = CategoryId;
        _workspaceService.ProjectId = ProjectId;
        _navigationManager.NavigateTo($"/workspace/{CategoryId}/{ProjectId}");
    }


    void GoToPreview()
    {
        _workspaceService.CategoryId = CategoryId;
        _workspaceService.ProjectId = ProjectId;
        _navigationManager.NavigateTo($"/preview/{CategoryId}/{ProjectId}");
    }

    async void OpenAddCategoryDialog()
    {
        var dialog = await _dialogService.ShowAsync<EnterOneStringDialog>();
        var result = await dialog.Result;
        if (!result.Canceled && result.Data != null)
        {
            string eil = result.Data.ToString()!;
            if (eil.Length > 0)
            {
                Category cat = new Category();
                cat.fields.name.stringValue = eil;
                await _categoriesService.AddCategory(cat);
                Categories = await _categoriesService.GetAllCategories();
                Snackbar.Add("Category added.", Severity.Success);
            }
        }
    }

    async void OpenAddProjectDialog()
    {
        var dialog = await _dialogService.ShowAsync<EnterOneStringDialog>();
        var result = await dialog.Result;
        if (!result.Canceled && result.Data != null)
        {
            string eil = result.Data.ToString()!;
            if (eil.Length > 0)
            {
                Project pro = new Project();
                pro.fields.name.stringValue = eil;
                await _projectsService.AddProject(pro, CategoryId);
                Projects = await _projectsService.GetAllProjects(CategoryId);
                Snackbar.Add("Project added.", Severity.Success);
                StateHasChanged();
            }
        }
    }

    async void RemoveCategory()
    {
        if (CategoryId != null)
        {
            if (CategoryId.Length > 0)
            {
                var parameters = new DialogParameters();
                parameters.Add("BodyText", "Delete category?");
                var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
                var dialog = _dialogService.Show<ConfirmDeletionDialog>("Category deletion", parameters, options);

                if (!(await dialog.Result).Canceled)
                {
                    if (await _categoriesService.DeleteCategory(CategoryId))
                    {
                        Categories = await _categoriesService.GetAllCategories();
                    }

                    //ProjectName = string.Empty;
                    CategoryName = string.Empty;
                    goToWorkspaceDisabled = true;
                    goToPreviewDisabled = true;
                    Snackbar.Add("Category removed.", Severity.Warning);
                    StateHasChanged();
                }
            }
        }
    }

    async void RemoveProject()
    {
        if (CategoryId != null && ProjectId != null)
        {
            if (CategoryId.Length > 0 && ProjectId.Length > 0)
            {
                var parameters = new DialogParameters();
                parameters.Add("BodyText", "Delete project?");
                var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
                var dialog = _dialogService.Show<ConfirmDeletionDialog>("Project deletion", parameters, options);

                if (!(await dialog.Result).Canceled)
                {
                    await _projectsService.DeleteProject(CategoryId, ProjectId);
                    GetProjects();
                    ProjectName = string.Empty;
                    goToWorkspaceDisabled = true;
                    goToPreviewDisabled = true;
                    Snackbar.Add("Project removed.", Severity.Warning);
                    StateHasChanged();
                }
            }
        }
    }

    void OnValueChanged(string selected)
    {
        if (selected != null && selected != string.Empty)
        {
            goToWorkspaceDisabled = false;
            goToPreviewDisabled = false;
        }
    }
}